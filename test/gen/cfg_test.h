#include "../test.h"

int test_command_ids[] = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
};

char *test_commands_expected[NUM_COMMANDS] = {
  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: x\n"
  "| | | TYPE\n"
  "| | | | ID: int\n"
  "| | | EXPR\n"
  "| | | | LITERAL\n"
  "| | | | | NUMBER: 1000\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: y\n"
  "| | | TYPE\n"
  "| | | | ID: float\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | FLOAT\n"
  "| | | | | NUMBER: 200\n"
  "| | | | | NUMBER: 1\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | VAR\n"
  "| | | ID: z\n"
  "| | | TYPE\n"
  "| | | | TUPLE_TYPE\n"
  "| | | | | TUPLE_TYPE_BODY\n"
  "| | | | | | TTB_TYPE\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: x\n"
  "| | | | | | | | TYPE\n"
  "| | | | | | | | | ID: i\n"
  "| | | | | | TTB_TYPE\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: y\n"
  "| | | | | | | | TYPE\n"
  "| | | | | | | | | ID: float\n"
  "| | | | TUPLE_TYPE\n"
  "| | | | | TUPLE_TYPE_BODY\n"
  "| | | | | | TTB_TYPE\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: ret\n"
  "| | | | | | | | TYPE\n"
  "| | | | | | | | | id: i\n",

  "0 => {1, 2}:\n"
  "| EXPR\n"
  "| | EXPR_AND\n"
  "| | | EXPR_REL\n"
  "| | | | VAR\n"
  "| | | | | ID: x\n"
  "| | | | RANGLE\n"
  "| | | | LITERAL\n"
  "| | | | | NUMBER: 3\n"
  "| | | AND\n"
  "| | | EXPR_REL\n"
  "| | | | VAR\n"
  "| | | | | ID: y\n"
  "| | | | LANGLE\n"
  "| | | | LITERAL\n"
  "| | | | | NUMBER: 2\n"
  "1 => {3}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: x\n"
  "| | EXPR\n"
  "| | | CALL\n"
  "| | | | VAR\n"
  "| | | | | ID: z\n"
  "| | | | TUPLE\n"
  "| | | | | TUPLE_BODY\n"
  "| | | | | | EXPR\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: x\n"
  "| | | | | | EXPR\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: y\n"
  "2 => {3}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: x\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | NUMBER: 1\n",
  "3 => {EOF}"

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: x\n"
  "| | EXPR\n"
  "| | | EXPR_SUM\n"
  "| | | | EXPR_MUL\n"
  "| | | | | VAR\n"
  "| | | | | | ID: x\n"
  "| | | | | STAR\n"
  "| | | | | LITERAL\n"
  "| | | | | | NUMBER: 2\n"
  "| | | | PLUS\n"
  "| | | | LITERAL\n"
  "| | | | | NUMBER: 1000\n"
  "| | | | MINUS\n"
  "| | | | LITERAL\n"
  "| | | | | NUMBER: 30\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | COLON-ASSIGN\n"
  "| | VAR\n"
  "| | | ID: w\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | HEX: 1adf\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | COLON-ASSIGN\n"
  "| | VAR\n"
  "| | | ID: a\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | BINARY: 0011\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | COLON-ASSIGN\n"
  "| | VAR\n"
  "| | | ID: b\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | OCTAL: 200\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | COLON-ASSIGN\n"
  "| | VAR\n"
  "| | | ID: c\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | FLOAT\n"
  "| | | | | NUMBER: 300\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | COLON-ASSIGN\n"
  "| | VAR\n"
  "| | | ID: d\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | FLOAT\n"
  "| | | | | NUMBER: 400\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: e\n"
  "| | | TYPE\n"
  "| | | | TUPLE_TYPE\n"
  "| | | | | TUPLE_TYPE_BODY\n"
  "| | | | | | TTB_TYPE\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: a\n"
  "| | | | | | | | TYPE\n"
  "| | | | | | | | | ID: int\n"
  "| | | | | | TTB_TYPE\n"
  "| | | | | | | VAR\n"
  "| | | | | | | | ID: b\n"
  "| | | | | | | | TYPE\n"
  "| | | | | | | | | ID: int\n"
  "| | EXPR\n"
  "| | | TUPLE\n"
  "| | | | TUPLE_BODY\n"
  "| | | | | EXPR\n"
  "| | | | | | LITERAL\n"
  "| | | | | | | NUMBER: 1\n"
  "| | | | | EXPR\n"
  "| | | | | | LITERAL\n"
  "| | | | | | | NUMBER: 2\n",

  "0 => {EOF}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: f\n"
  "| | EXPR\n"
  "| | | VAR\n"
  "| | | | ID: e\n"
  "| | | | VAR\n"
  "| | | | | ID: a\n",

  "0 => {1}:\n"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | VAR\n"
  "| | | ID: i\n"
  "| | EXPR\n"
  "| | | LITERAL\n"
  "| | | | NUMBER: 0\n"
  "1 => {2, 3}"
  "| EXPR\n"
  "| | EXPR_REL\n"
  "| | | VAR\n"
  "| | | | ID: i\n"
  "| | | LITERAL\n"
  "| | | | NUMBER: 64\n"
  "2 => {1}\n"
  "| EXPR\n"
  "| | CALL\n"
  "| | | VAR: f\n"
  "| | | TUPLE\n"
  "| | | | TUPLE_BODY\n"
  "| | | | | EXPR\n"
  "| | | | | | VAR: i"
  "| EXPR\n"
  "| | ASSIGN\n"
  "| | | VAR: i\n"
  "| | | EXPR\n"
  "| | | | EXPR_SUM\n"
  "| | | | | VAR: i\n"
  "| | | | | LITERAL\n"
  "| | | | | | NUMBER: 1\n"
  "3 => {EOF}\n"
};
